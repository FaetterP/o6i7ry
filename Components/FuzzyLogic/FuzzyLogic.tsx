import AandB from "./AandB";
import AB from "./AB";
import NotA from "./NotA";
import AorB from "./AorB";
import ColdHot from "./ColdHot";
import Link from "next/link";
import AxorB from "./AxorB";
import VeryA from "./VeryA";
import SlightlyA from "./SlightlyA";
import SliceA from "./SliceA";
import { BlockMath, InlineMath } from "react-katex";
import IncorrectCentroid from "./IncorrectCentroid";
import Temperature from "./Temperature";
import Speed from "./Speed";
import SpeedSliced from "./SpeedSliced";
import SpeedMerged from "./SpeedMerged";
import SpeedMergedCentroid from "./SpeedMergedCentroid";
import styles from "./FuzzyLogic.module.scss";

export default function FuzzyLogic() {
  return (
    <div className={`wrapper ${styles.fuzzyLogicGuide}`}>
      <span>
        В классической логике мы говорим, что выражение является истинным или
        ложным. Нечёткая логика отличается тем, что в ней выражения могут быть{" "}
        <i>частично истинными</i> или <i>частично ложными</i>.
      </span>
      <span>
        В обычной логике мы можем сказать, что у нас есть <b>множество</b>{" "}
        объектов, удовлетворяющих какому-то условию. В нечёткой логике также
        есть понятие <b>нечёткого множества</b>. Нечёткое множество задаётся
        функцией с областью значений [0; 1], где 0 - значение не принадлежит
        множеству, 1 - принадлежит, а промежуточные - частично принадлежит.
      </span>
      <span>
        Рассмотрим пример. Пусть мы хотим описать температуру в помещении.
      </span>
      <span>
        Если мы будем пользоваться чёткой логикой, то мы задаём такие условия:
        <br />• t{"<"}20 - холодно.
        <br />• t{">"}=20 - тепло.
        <br />
        Но проблема здесь в том, что 19.99 - это холодно, а добавив 0.01 градус,
        уже будет тепло. Очевидно, что это плохая модель для текущей задачи.
      </span>
      <span>
        Рассмотрим, как это можно описать с помощью нечёткой логики.
        <br />
        <b>Холодно</b> - это 15 градусов. 20 градусов - это может быть холодно,
        если сильный ветер.А 30 градусов - это уже не холодно.
        <br />
        <b>Тепло</b> мы опишем также: 15 - это не тепло, 20 - зависит от погоды,
        а 30 - это уже тепло.
        <br />
      </span>
      <span>
        Теперь можно создать два нечётких множества, соответствующие этим
        условиям.
        <br />
        Cold = Triangle(-Infinity, 15, 30)
        <br />
        Hot = Triangle(15, 30, Infinity)
        <br />
      </span>
      <ColdHot />
      <span>
        Таким образом при температуре 10 мы скажем, что холодно с вероятностью
        1, а тепло с вероятностью 0. А при температуре 16 градусов будет холодно
        с вероятностью 0.4, а тепло с вероятностью 0.6. Причём не обязательно в
        сумме должна быть единица. Эти значения - вероятность того, что значение
        просто принадлежит множеству. Может быть и такое, что значение
        одновременно полностью (y=1) принадлежит нескольким множествам.
      </span>
      <span>
        Сами функции, задающие нечёткое множество могут быть любыми:
        <ul>
          <li>прямоугольник</li>
          <li>треугольник</li>
          <li>трапеция</li>
          <li>сигмоида</li>
          <li>нормальное распределение</li>
          <li>или любая другая функция, на самом деле</li>
        </ul>
      </span>
      <span>
        Над нечёткими множествами, как и над обычными, можно провести операции
        И, ИЛИ и НЕ.
      </span>
      <span>
        Пусть у нас имеется треугольное множество A и прямоугольное множество B.
      </span>
      <AB />
      <ul>
        <li>
          A && B = min(A, B)
          <AandB />
        </li>
        <li>
          A || B = max(A, B)
          <AorB />
        </li>
        <li>
          -A = 1-A
          <NotA />
        </li>
      </ul>
      <span>
        А имея эти три операции можно построить{" "}
        <Link href="https://ru.wikipedia.org/wiki/Дизъюнктивная_нормальная_форма">
          любое выражение
        </Link>
        : например, тот же XOR.
        <br />
        XOR(A,B) = Or(And(Not(A), B), And(A, Not(B)))
      </span>
      <AxorB />
      <span>
        Также для нечётких множеств можно использовать слова «очень» и
        «немного». Слово «очень» ослабляет слабые признаки. Т.е. если
        вероятность того, что значение принадлежит к множеству A равно 0.1, то к
        множеству «очень A» оно принадлежит с вероятностью 0.01. Математически
        это <b>возведение в степень</b>.
      </span>
      <VeryA />
      <span>
        Слово «немного» работает схожим образом, только оно поднимает слабые
        значения. Делается это с помощью <b>корня</b>.
      </span>
      <SlightlyA />
      <span>
        Также есть операция среза, когда у множества срезаются значения сверху.
        <br />
        Slice(A, 0.5)
      </span>
      <SliceA />

      <hr />
      <span>
        Также над двумя множествами можно проводить стандартные математические
        операции: +-*/.
      </span>
      <span>
        Ели мы проводим операции между двумя множествами, то над иксами мы
        проделываем указанную операцию, а игреки пересекаем.
      </span>
      <span>
        Для примера зададим два дискретных множества: A=[(10, 1) (15, 0.5)] и
        B=[(14, 0.1) (20, 0.7)].
        <br />
        Тогда A+B=[(24, 0.1) (30, 0.5) (29, 0.1) (35, 0.5)].
        <br />
        Результат A+B также является нечётким множеством.
        <br />
        <br />
        TODO: дописать про проблемы сложения дискретных нечётких множеств <br />
        TODO: дописать про сложение непрерывных множеств <br />
      </span>
      <hr />

      <span>
        Нечёткое множество можно превратить в число. Это можно сделать двумя
        способами:
        <ul>
          <li>найти максимум этого множества</li>
          <li>вычислить центр масс фигуры, ограниченной множеством</li>
        </ul>
      </span>
      <span>
        Если мы берём максимум, то стоит учитывать, что их можно быть несколько.
        В таком случае есть три подхода: взять левый максимум, правый или
        среднее арифметическое между ними. Какой выбрать зависит от решаемой
        задачи. Иногда лучше взять минимальное значение (если это какие-то
        затраты) или максимальное (если это предполагаемая выгода). <br />
        Со средним максимумом всё не так просто. Дело в том, что он может быть
        не максимальным. Более того он может быть в том месте, где множество
        имеет значение 0.
      </span>
      <span>
        Центр масс находится по формуле:
        <BlockMath>
          {
            "\\frac {\\int_{-\\infty}^\\infty f(x) \\cdot x dx} {\\int_{-\\infty}^\\infty f(x) dx}"
          }
        </BlockMath>
      </span>
      <span>
        С центром масс такая же проблема: он может быть там, где значение 0.
        <br />
        Например, мы оцениваем риски и они большие, если значение слишком больше
        или слишком малое. Тогда взяв центр масс мы найдём{" "}
        <i>среднюю температуру по больнице</i> и, получается, риски будут больше
        всего в самом стабильном положении, что неверно.
        <IncorrectCentroid />
        Поэтому иногда выбор способа деффазификации может быть важен.
      </span>
      <hr />
      <span>
        В классической логике есть операция импликации. Словами её можно описать
        как «если A, то B». В нечёткой логике тоже есть аналогичная операция.
      </span>
      <span>
        Допустим, мы решаем задачу, где нужно по температуре в комнате задать
        число оборотов на вентиляторе.
        <br />
        Для этого определим множества температур и множества скоростей.
      </span>
      <span>
        Температуры будет 3: холодно - (-inf, 15), тепло (15, 35), жарко (25,
        inf).
        <Temperature />
      </span>
      <span>
        Скорости оборотов будет две: медленно - (600, 800) и быстро - (700,
        1000).
        <Speed />
      </span>
      <span>Для того, чтобы определить условия составим таблицу:</span>
      <table>
        <tbody>
          <tr>
            <th></th>
            <th>Холодно</th>
            <th>Тепло</th>
            <th>Жарко</th>
          </tr>
          <tr>
            <th>Медленно</th>
            <td>1</td>
            <td>0.7</td>
            <td>0.1</td>
          </tr>
          <tr>
            <th>Быстро</th>
            <td>0</td>
            <td>0.4</td>
            <td>1</td>
          </tr>
        </tbody>
      </table>
      <span>
        Такая таблица называется нечётким отношением. Она определяет степень
        уверенности, что при возникновении A требуется сделать B. Т.е. степень
        уверенности в утверждении «Если <b>тепло</b>, то включить <b>быстрые</b>{" "}
        обороты» равна 0.4.
      </span>
      <span>
        Посмотрим, какая скорость оборотов нужна для температуры 27 градусов.
        <br />
        Для начала найдём значения множеств температур в этой точке.
        <br />
        Холодно=0, тепло=0.8, жарко=0.2.
      </span>
      <span>Теперь нужно пересечь эти значения со столбцами таблицы.</span>
      <table>
        <tbody>
          <tr>
            <th></th>
            <th>Холодно</th>
            <th>Тепло</th>
            <th>Жарко</th>
          </tr>
          <tr>
            <th>Медленно</th>
            <td>1 && 0</td>
            <td>0.7 && 0.8</td>
            <td>0.1 && 0.2</td>
          </tr>
          <tr>
            <th>Быстро</th>
            <td>0 && 0</td>
            <td>0.4 && 0.8</td>
            <td>1 && 0.2</td>
          </tr>
        </tbody>
      </table>
      <table>
        <tbody>
          <tr>
            <th></th>
            <th>Холодно</th>
            <th>Тепло</th>
            <th>Жарко</th>
          </tr>
          <tr>
            <th>Медленно</th>
            <td>0</td>
            <td>0.7</td>
            <td>0.1</td>
          </tr>
          <tr>
            <th>Быстро</th>
            <td>0</td>
            <td>0.4</td>
            <td>0.2</td>
          </tr>
        </tbody>
      </table>
      <span>
        Значения в таблицах являются числом для среза соответствующего
        множества.
        <br />
        Теперь мы получили 6 графиков для скорости. Нужно их все объединить
        (ИЛИ).
        <br />
        На самом деле, есть способ сделать это проще. Можно взять максимум по
        каждой строке, потому что в процессе объединения меньше значения
        поглотятся и не будут иметь никакого влияния.
      </span>
      <span>
        Итак, максимумы по строкам: медленно - 0.7, быстро - 0.4. <br />
        Срезав эти множества получатся такие:
      </span>
      <SpeedSliced />
      <span>Объединим их.</span>
      <SpeedMerged />
      <span>
        Полученное множество является результирующим множеством оборотов для
        температуры 27 градусов. Осталось его только деффазифицировать. Сделаем
        это через центр масс.
      </span>
      <SpeedMergedCentroid />
      <span>
        Итого, для температуры 27 градусов нужно установить обороты на 784.
      </span>
      <span>
        Здесь мы рассмотрели как одна переменная (температура) влияет на другую
        (скорость вращения). Но их может быть и несколько. Например, в{" "}
        <Link href="">данной работе</Link> показано движение автомобиля в
        зависимости от его поворота и координаты.
        <br />
        Т.е. на вход подаётся угол и координата x, а на выходе получается угол,
        на который нужно повернуть на текущем шаге.
      </span>
      <span>Также там была построена следующая таблица:</span>
      <table>
        <tbody>
          <tr>
            <th></th>
            <th>LE</th>
            <th>LC</th>
            <th>CE</th>
            <th>EC</th>
            <th>RI</th>
          </tr>
          <tr>
            <th>RB</th>
            <td>PS</td>
            <td>PM</td>
            <td>PM</td>
            <td>PB</td>
            <td>PB</td>
          </tr>
          <tr>
            <th>RU</th>
            <td>NS</td>
            <td>PS</td>
            <td>PM</td>
            <td>PB</td>
            <td>PB</td>
          </tr>
          <tr>
            <th>RV</th>
            <td>NM</td>
            <td>NS</td>
            <td>PS</td>
            <td>PM</td>
            <td>PB</td>
          </tr>
          <tr>
            <th>VE</th>
            <td>NM</td>
            <td>NM</td>
            <td>ZE</td>
            <td>PM</td>
            <td>PM</td>
          </tr>
          <tr>
            <th>LV</th>
            <td>NB</td>
            <td>NM</td>
            <td>NS</td>
            <td>PS</td>
            <td>PM</td>
          </tr>
          <tr>
            <th>LU</th>
            <td>NB</td>
            <td>NB</td>
            <td>NM</td>
            <td>NS</td>
            <td>PS</td>
          </tr>
          <tr>
            <th>LB</th>
            <td>NB</td>
            <td>NB</td>
            <td>NM</td>
            <td>NM</td>
            <td>NS</td>
          </tr>
        </tbody>
      </table>
      <span>
        Она работает также. Например, «если <b>LE</b> и <b>RB</b>, то <b>PS</b>
        ». Далее нужно расставить веса. В этой таблице уже 35 значений, и их
        число будет увеличиться экспоненциально по мере увеличения её размеров и
        количества признаков. Также не между всеми комбинациями можно установить
        настолько чёткую связь, чтобы записать какое-то конкретное число.
        <br />В таких случах можно просто заполнить всю таблицу <b>единицами</b>
        . В процессе вычисления большая часть таблицы всё равно занулится,
        останутся только те значения, множества которых мы пересекли.
      </span>
      <table>
        <tbody>
          <tr>
            <th></th>
            <th>LE</th>
            <th>LC</th>
            <th>CE</th>
            <th>EC</th>
            <th>RI</th>
          </tr>
          <tr>
            <th>RB</th>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
          </tr>
          <tr>
            <th>RU</th>
            <td>0</td>
            <td>0.1</td>
            <td>0.4</td>
            <td>0</td>
            <td>0</td>
          </tr>
          <tr>
            <th>RV</th>
            <td>0</td>
            <td>0.1</td>
            <td>0.2222</td>
            <td>0</td>
            <td>0</td>
          </tr>
          <tr>
            <th>VE</th>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
          </tr>
          <tr>
            <th>LV</th>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
          </tr>
          <tr>
            <th>LU</th>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
          </tr>
          <tr>
            <th>LB</th>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
          </tr>
        </tbody>
      </table>
      <span>
        Но остаётся проблема с тем, что нам всё ещё нужно заполнять 35 ячеек, но
        только же конечными множествами. Но и это делать необязательно. Потому
        что вся эта табличка разбивается на 35 условий «если ... то ...». Более
        того логично будет <b>начать</b> с этих условий, чтобы понять, какие
        знания о системе у нас имеются, а уже потом заполнять табличку.
      </span>
      <span>
        Т.е. для составления отношения достаточно будет только определить
        несколько импликаций. Заполнение всех ячеей и их весов является
        необязательным.
      </span>
      <hr />
      <span>
        В завершении обращу внимание, что нечёткие множества обнаруживают себя в
        достаточно неожиданных местах.
      </span>
      <span>
        Пусть перед нами стоит задача остановить колеблющийся маятник,
        прикладывая к нему силу.
      </span>
      <span>
        Если бы мы использовали чёткую логику, то условие было бы следующим:
        <br />
        • Если угол меньше 0, то прикладывать силу F. <br />
        • Если угол больше 0, то прикладывать силу -F. <br />
        Но здесь мы упираемся в ту же проблему, которая была озвучена в начале.
        Вблизи 0 маятник не остановится никогда, потому что стоит ему на
        миллиметр переступить границу, вектор силы моментально изменится на
        противоположенный, но её значение будет такое же. В итоге маятник будет
        колбасить около нуля.
      </span>
      <span>
        Решить эту задачу может нечёткая логика. Построим множество, которое
        будет определять, с какой силой мы будем толкать маятник. По оси x будет
        скорость маятника в конкретной точке.
        <br />
        Таким образом, чем больше скорость, тем большую силу мы прикладываем.
        Соответственно, если скорость станет равна 0, то и сила будет равна 0.
      </span>
      <span>
        Уравнение постоянного маятника задано формулой:
        <InlineMath>{"\\theta''+\\omega^2\\theta=0"}</InlineMath>, где
        <br />
        <InlineMath>{"\\theta = \\theta(t)"}</InlineMath> - это угол,
        <br />
        <InlineMath>{"\\theta''"}</InlineMath> - это вторая производная, т.е.
        ускорение.
      </span>
      <span>
        Сила, зависящая от скорости будет выглядеть как{" "}
        <InlineMath>{"F=k\\theta'"}</InlineMath>, где
        <br />
        <InlineMath>{"k\\ne0"}</InlineMath> - некоторый множитель,
        <br />
        <InlineMath>{"\\theta'"}</InlineMath> - первая производная от угла, т.е.
        скорость.
      </span>
      <span>
        Таким образом, приложив эту силу к маятнику мы получим следующую формулу
        колебаний:
        <InlineMath>{"\\theta''+k\\theta+\\omega^2\\theta=0"}</InlineMath>. А
        это уравнение маятника с затухающими колебаниями.
      </span>
      <span>
        Т.е. простыми нематематическими рассуждениями мы составили уравнение
        останавливающегося маятника.
      </span>

      TODO: пересмотреть отношение к тексту про маятник и привести больше связи с нечёткими множествами

      <span></span>
    </div>
  );
}
